# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _viso2
else:
    import _viso2

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _viso2.delete_SwigPyIterator

    def value(self):
        r"""value(self) -> PyObject *"""
        return _viso2.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""incr(self, n=1) -> SwigPyIterator"""
        return _viso2.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""decr(self, n=1) -> SwigPyIterator"""
        return _viso2.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""distance(self, x) -> ptrdiff_t"""
        return _viso2.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""equal(self, x) -> bool"""
        return _viso2.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(self) -> SwigPyIterator"""
        return _viso2.SwigPyIterator_copy(self)

    def next(self):
        r"""next(self) -> PyObject *"""
        return _viso2.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(self) -> PyObject *"""
        return _viso2.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(self) -> PyObject *"""
        return _viso2.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""advance(self, n) -> SwigPyIterator"""
        return _viso2.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""__eq__(self, x) -> bool"""
        return _viso2.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""__ne__(self, x) -> bool"""
        return _viso2.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""__iadd__(self, n) -> SwigPyIterator"""
        return _viso2.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""__isub__(self, n) -> SwigPyIterator"""
        return _viso2.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""__add__(self, n) -> SwigPyIterator"""
        return _viso2.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(self, n) -> SwigPyIterator
        __sub__(self, x) -> ptrdiff_t
        """
        return _viso2.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _viso2:
_viso2.SwigPyIterator_swigregister(SwigPyIterator)

class VisualOdometry(object):
    r"""Proxy of C++ VisualOdometry class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _viso2.delete_VisualOdometry

    def process(self, p_matched_):
        r"""process(self, p_matched_) -> bool"""
        return _viso2.VisualOdometry_process(self, p_matched_)

    def getMotion(self):
        r"""getMotion(self) -> Matrix"""
        return _viso2.VisualOdometry_getMotion(self)

    def getMatches(self):
        r"""getMatches(self) -> MatchVector"""
        return _viso2.VisualOdometry_getMatches(self)

    def getNumberOfMatches(self):
        r"""getNumberOfMatches(self) -> int32_t"""
        return _viso2.VisualOdometry_getNumberOfMatches(self)

    def getNumberOfInliers(self):
        r"""getNumberOfInliers(self) -> int32_t"""
        return _viso2.VisualOdometry_getNumberOfInliers(self)

    def getInlierIndices(self):
        r"""getInlierIndices(self) -> std::vector< int32_t,std::allocator< int32_t > >"""
        return _viso2.VisualOdometry_getInlierIndices(self)

    def getGain(self, inliers_):
        r"""getGain(self, inliers_) -> float"""
        return _viso2.VisualOdometry_getGain(self, inliers_)

# Register VisualOdometry in _viso2:
_viso2.VisualOdometry_swigregister(VisualOdometry)

class calibration(object):
    r"""Proxy of C++ VisualOdometry::calibration class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    f = property(_viso2.calibration_f_get, _viso2.calibration_f_set, doc=r"""f""")
    cu = property(_viso2.calibration_cu_get, _viso2.calibration_cu_set, doc=r"""cu""")
    cv = property(_viso2.calibration_cv_get, _viso2.calibration_cv_set, doc=r"""cv""")

    def __init__(self):
        r"""__init__(self) -> calibration"""
        _viso2.calibration_swiginit(self, _viso2.new_calibration())
    __swig_destroy__ = _viso2.delete_calibration

# Register calibration in _viso2:
_viso2.calibration_swigregister(calibration)

class bucketing(object):
    r"""Proxy of C++ VisualOdometry::bucketing class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max_features = property(_viso2.bucketing_max_features_get, _viso2.bucketing_max_features_set, doc=r"""max_features""")
    bucket_width = property(_viso2.bucketing_bucket_width_get, _viso2.bucketing_bucket_width_set, doc=r"""bucket_width""")
    bucket_height = property(_viso2.bucketing_bucket_height_get, _viso2.bucketing_bucket_height_set, doc=r"""bucket_height""")

    def __init__(self):
        r"""__init__(self) -> bucketing"""
        _viso2.bucketing_swiginit(self, _viso2.new_bucketing())
    __swig_destroy__ = _viso2.delete_bucketing

# Register bucketing in _viso2:
_viso2.bucketing_swigregister(bucketing)

class VO_parameters(object):
    r"""Proxy of C++ VisualOdometry::parameters class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    match = property(_viso2.VO_parameters_match_get, _viso2.VO_parameters_match_set, doc=r"""match""")
    bucket = property(_viso2.VO_parameters_bucket_get, _viso2.VO_parameters_bucket_set, doc=r"""bucket""")
    calib = property(_viso2.VO_parameters_calib_get, _viso2.VO_parameters_calib_set, doc=r"""calib""")

    def __init__(self):
        r"""__init__(self) -> VO_parameters"""
        _viso2.VO_parameters_swiginit(self, _viso2.new_VO_parameters())
    __swig_destroy__ = _viso2.delete_VO_parameters

# Register VO_parameters in _viso2:
_viso2.VO_parameters_swigregister(VO_parameters)

class VisualOdometryMono(VisualOdometry):
    r"""Proxy of C++ VisualOdometryMono class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, param):
        r"""__init__(self, param) -> VisualOdometryMono"""
        _viso2.VisualOdometryMono_swiginit(self, _viso2.new_VisualOdometryMono(param))
    __swig_destroy__ = _viso2.delete_VisualOdometryMono

    def getInlierMatches(self):
        r"""getInlierMatches(self) -> MatchVector"""
        return _viso2.VisualOdometryMono_getInlierMatches(self)

    def process(self, *args):
        r"""
        process(self, I, dims, replace=False) -> bool
        process(self, I1, I2, dims, replace=False) -> bool
        process(self, I, dims, feature, dims_feature, replace) -> bool
        process(self, match, dims) -> bool
        """
        return _viso2.VisualOdometryMono_process(self, *args)

    def process_frame(self, image1, replace=False):
        r"""process_frame(self, image1, replace=False) -> bool"""
        return _viso2.VisualOdometryMono_process_frame(self, image1, replace)

    def process_frame_preFeat(self, image1, feature, replace=False):
        r"""process_frame_preFeat(self, image1, feature, replace=False) -> bool"""
        return _viso2.VisualOdometryMono_process_frame_preFeat(self, image1, feature, replace)

    def process_frame_preMatch(self, match):
        r"""process_frame_preMatch(self, match) -> bool"""
        return _viso2.VisualOdometryMono_process_frame_preMatch(self, match)

# Register VisualOdometryMono in _viso2:
_viso2.VisualOdometryMono_swigregister(VisualOdometryMono)

class Mono_parameters(VO_parameters):
    r"""Proxy of C++ VisualOdometryMono::parameters class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    height = property(_viso2.Mono_parameters_height_get, _viso2.Mono_parameters_height_set, doc=r"""height""")
    pitch = property(_viso2.Mono_parameters_pitch_get, _viso2.Mono_parameters_pitch_set, doc=r"""pitch""")
    ransac_iters = property(_viso2.Mono_parameters_ransac_iters_get, _viso2.Mono_parameters_ransac_iters_set, doc=r"""ransac_iters""")
    inlier_threshold = property(_viso2.Mono_parameters_inlier_threshold_get, _viso2.Mono_parameters_inlier_threshold_set, doc=r"""inlier_threshold""")
    motion_threshold = property(_viso2.Mono_parameters_motion_threshold_get, _viso2.Mono_parameters_motion_threshold_set, doc=r"""motion_threshold""")

    def __init__(self):
        r"""__init__(self) -> Mono_parameters"""
        _viso2.Mono_parameters_swiginit(self, _viso2.new_Mono_parameters())
    __swig_destroy__ = _viso2.delete_Mono_parameters

# Register Mono_parameters in _viso2:
_viso2.Mono_parameters_swigregister(Mono_parameters)

class VisualOdometryStereo(VisualOdometry):
    r"""Proxy of C++ VisualOdometryStereo class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, param):
        r"""__init__(self, param) -> VisualOdometryStereo"""
        _viso2.VisualOdometryStereo_swiginit(self, _viso2.new_VisualOdometryStereo(param))
    __swig_destroy__ = _viso2.delete_VisualOdometryStereo

    def process(self, *args):
        r"""
        process(self, I1, I2, dims, replace=False) -> bool
        process(self, p_matched_) -> bool
        """
        return _viso2.VisualOdometryStereo_process(self, *args)

    def process_frame(self, image1, image2, replace=False):
        r"""process_frame(self, image1, image2, replace=False) -> bool"""
        return _viso2.VisualOdometryStereo_process_frame(self, image1, image2, replace)

# Register VisualOdometryStereo in _viso2:
_viso2.VisualOdometryStereo_swigregister(VisualOdometryStereo)

class Stereo_parameters(VO_parameters):
    r"""Proxy of C++ VisualOdometryStereo::parameters class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    base = property(_viso2.Stereo_parameters_base_get, _viso2.Stereo_parameters_base_set, doc=r"""base""")
    ransac_iters = property(_viso2.Stereo_parameters_ransac_iters_get, _viso2.Stereo_parameters_ransac_iters_set, doc=r"""ransac_iters""")
    inlier_threshold = property(_viso2.Stereo_parameters_inlier_threshold_get, _viso2.Stereo_parameters_inlier_threshold_set, doc=r"""inlier_threshold""")
    reweighting = property(_viso2.Stereo_parameters_reweighting_get, _viso2.Stereo_parameters_reweighting_set, doc=r"""reweighting""")

    def __init__(self):
        r"""__init__(self) -> Stereo_parameters"""
        _viso2.Stereo_parameters_swiginit(self, _viso2.new_Stereo_parameters())
    __swig_destroy__ = _viso2.delete_Stereo_parameters

# Register Stereo_parameters in _viso2:
_viso2.Stereo_parameters_swigregister(Stereo_parameters)

class Matrix(object):
    r"""Proxy of C++ Matrix class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> Matrix
        __init__(self, m, n) -> Matrix
        __init__(self, m, n, val_) -> Matrix
        __init__(self, M) -> Matrix
        """
        _viso2.Matrix_swiginit(self, _viso2.new_Matrix(*args))
    __swig_destroy__ = _viso2.delete_Matrix

    def assign(self, M):
        r"""assign(self, M) -> Matrix"""
        return _viso2.Matrix_assign(self, M)

    def getData(self, val_, i1=0, j1=0, i2=-1, j2=-1):
        r"""getData(self, val_, i1=0, j1=0, i2=-1, j2=-1)"""
        return _viso2.Matrix_getData(self, val_, i1, j1, i2, j2)

    def getMat(self, i1, j1, i2=-1, j2=-1):
        r"""getMat(self, i1, j1, i2=-1, j2=-1) -> Matrix"""
        return _viso2.Matrix_getMat(self, i1, j1, i2, j2)

    def setMat(self, M, i, j):
        r"""setMat(self, M, i, j)"""
        return _viso2.Matrix_setMat(self, M, i, j)

    def setVal(self, s, i1=0, j1=0, i2=-1, j2=-1):
        r"""setVal(self, s, i1=0, j1=0, i2=-1, j2=-1)"""
        return _viso2.Matrix_setVal(self, s, i1, j1, i2, j2)

    def setDiag(self, s, i1=0, i2=-1):
        r"""setDiag(self, s, i1=0, i2=-1)"""
        return _viso2.Matrix_setDiag(self, s, i1, i2)

    def zero(self):
        r"""zero(self)"""
        return _viso2.Matrix_zero(self)

    def extractCols(self, idx):
        r"""extractCols(self, idx) -> Matrix"""
        return _viso2.Matrix_extractCols(self, idx)

    @staticmethod
    def eye(m):
        r"""eye(m) -> Matrix"""
        return _viso2.Matrix_eye(m)

    def identity(self):
        r"""identity(self)"""
        return _viso2.Matrix_identity(self)

    @staticmethod
    def diag(M):
        r"""diag(M) -> Matrix"""
        return _viso2.Matrix_diag(M)

    @staticmethod
    def reshape(M, m, n):
        r"""reshape(M, m, n) -> Matrix"""
        return _viso2.Matrix_reshape(M, m, n)

    @staticmethod
    def rotMatX(angle):
        r"""rotMatX(angle) -> Matrix"""
        return _viso2.Matrix_rotMatX(angle)

    @staticmethod
    def rotMatY(angle):
        r"""rotMatY(angle) -> Matrix"""
        return _viso2.Matrix_rotMatY(angle)

    @staticmethod
    def rotMatZ(angle):
        r"""rotMatZ(angle) -> Matrix"""
        return _viso2.Matrix_rotMatZ(angle)

    def __add__(self, M):
        r"""__add__(self, M) -> Matrix"""
        return _viso2.Matrix___add__(self, M)

    def __sub__(self, M):
        r"""__sub__(self, M) -> Matrix"""
        return _viso2.Matrix___sub__(self, M)

    def __mul__(self, *args):
        r"""
        __mul__(self, M) -> Matrix
        __mul__(self, s) -> Matrix
        """
        return _viso2.Matrix___mul__(self, *args)

    def __truediv__(self, *args):
        return _viso2.Matrix___truediv__(self, *args)
    __div__ = __truediv__



    def __neg__(self):
        r"""__neg__(self) -> Matrix"""
        return _viso2.Matrix___neg__(self)

    def __invert__(self):
        r"""__invert__(self) -> Matrix"""
        return _viso2.Matrix___invert__(self)

    def l2norm(self):
        r"""l2norm(self) -> FLOAT"""
        return _viso2.Matrix_l2norm(self)

    def mean(self):
        r"""mean(self) -> FLOAT"""
        return _viso2.Matrix_mean(self)

    @staticmethod
    def cross(a, b):
        r"""cross(a, b) -> Matrix"""
        return _viso2.Matrix_cross(a, b)

    @staticmethod
    def inv(M):
        r"""inv(M) -> Matrix"""
        return _viso2.Matrix_inv(M)

    def setInverse(self):
        r"""setInverse(self) -> bool"""
        return _viso2.Matrix_setInverse(self)

    def det(self):
        r"""det(self) -> FLOAT"""
        return _viso2.Matrix_det(self)

    def solve(self, M, eps=1e-20):
        r"""solve(self, M, eps=1e-20) -> bool"""
        return _viso2.Matrix_solve(self, M, eps)

    def lu(self, idx, d, eps=1e-20):
        r"""lu(self, idx, d, eps=1e-20) -> bool"""
        return _viso2.Matrix_lu(self, idx, d, eps)

    def svd(self, U, W, V):
        r"""svd(self, U, W, V)"""
        return _viso2.Matrix_svd(self, U, W, V)
    val = property(_viso2.Matrix_val_get, _viso2.Matrix_val_set, doc=r"""val""")
    m = property(_viso2.Matrix_m_get, _viso2.Matrix_m_set, doc=r"""m""")
    n = property(_viso2.Matrix_n_get, _viso2.Matrix_n_set, doc=r"""n""")

    def __str__(self):
        r"""__str__(self) -> std::string"""
        return _viso2.Matrix___str__(self)

    def toNumpy(self, mat):
        r"""toNumpy(self, mat)"""
        return _viso2.Matrix_toNumpy(self, mat)

# Register Matrix in _viso2:
_viso2.Matrix_swigregister(Matrix)

def Matrix_eye(m):
    r"""Matrix_eye(m) -> Matrix"""
    return _viso2.Matrix_eye(m)

def Matrix_diag(M):
    r"""Matrix_diag(M) -> Matrix"""
    return _viso2.Matrix_diag(M)

def Matrix_reshape(M, m, n):
    r"""Matrix_reshape(M, m, n) -> Matrix"""
    return _viso2.Matrix_reshape(M, m, n)

def Matrix_rotMatX(angle):
    r"""Matrix_rotMatX(angle) -> Matrix"""
    return _viso2.Matrix_rotMatX(angle)

def Matrix_rotMatY(angle):
    r"""Matrix_rotMatY(angle) -> Matrix"""
    return _viso2.Matrix_rotMatY(angle)

def Matrix_rotMatZ(angle):
    r"""Matrix_rotMatZ(angle) -> Matrix"""
    return _viso2.Matrix_rotMatZ(angle)

def Matrix_cross(a, b):
    r"""Matrix_cross(a, b) -> Matrix"""
    return _viso2.Matrix_cross(a, b)

def Matrix_inv(M):
    r"""Matrix_inv(M) -> Matrix"""
    return _viso2.Matrix_inv(M)

class Matcher(object):
    r"""Proxy of C++ Matcher class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, param):
        r"""__init__(self, param) -> Matcher"""
        _viso2.Matcher_swiginit(self, _viso2.new_Matcher(param))
    __swig_destroy__ = _viso2.delete_Matcher

    def setIntrinsics(self, f, cu, cv, base):
        r"""setIntrinsics(self, f, cu, cv, base)"""
        return _viso2.Matcher_setIntrinsics(self, f, cu, cv, base)

    def pushBackPreFeature(self, f1, num, replace):
        r"""pushBackPreFeature(self, f1, num, replace)"""
        return _viso2.Matcher_pushBackPreFeature(self, f1, num, replace)

    def matchFeatures(self, method, Tr_delta=None):
        r"""matchFeatures(self, method, Tr_delta=None)"""
        return _viso2.Matcher_matchFeatures(self, method, Tr_delta)

    def bucketFeatures(self, max_features, bucket_width, bucket_height):
        r"""bucketFeatures(self, max_features, bucket_width, bucket_height)"""
        return _viso2.Matcher_bucketFeatures(self, max_features, bucket_width, bucket_height)

    def getMatches(self):
        r"""getMatches(self) -> MatchVector"""
        return _viso2.Matcher_getMatches(self)

    def getGain(self, inliers):
        r"""getGain(self, inliers) -> float"""
        return _viso2.Matcher_getGain(self, inliers)

    def pushBack(self, *args):
        r"""
        pushBack(self, I1, I2, dims, replace)
        pushBack(self, I1, dims, replace)
        pushBack(self, I1, dims, f1, dims_feature, replace)
        pushBack(self, image1, image2, replace=False)
        pushBack(self, image1, replace=False)
        """
        return _viso2.Matcher_pushBack(self, *args)

# Register Matcher in _viso2:
_viso2.Matcher_swigregister(Matcher)

class Matcher_parameters(object):
    r"""Proxy of C++ Matcher::parameters class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nms_n = property(_viso2.Matcher_parameters_nms_n_get, _viso2.Matcher_parameters_nms_n_set, doc=r"""nms_n""")
    nms_tau = property(_viso2.Matcher_parameters_nms_tau_get, _viso2.Matcher_parameters_nms_tau_set, doc=r"""nms_tau""")
    match_binsize = property(_viso2.Matcher_parameters_match_binsize_get, _viso2.Matcher_parameters_match_binsize_set, doc=r"""match_binsize""")
    match_radius = property(_viso2.Matcher_parameters_match_radius_get, _viso2.Matcher_parameters_match_radius_set, doc=r"""match_radius""")
    match_disp_tolerance = property(_viso2.Matcher_parameters_match_disp_tolerance_get, _viso2.Matcher_parameters_match_disp_tolerance_set, doc=r"""match_disp_tolerance""")
    outlier_disp_tolerance = property(_viso2.Matcher_parameters_outlier_disp_tolerance_get, _viso2.Matcher_parameters_outlier_disp_tolerance_set, doc=r"""outlier_disp_tolerance""")
    outlier_flow_tolerance = property(_viso2.Matcher_parameters_outlier_flow_tolerance_get, _viso2.Matcher_parameters_outlier_flow_tolerance_set, doc=r"""outlier_flow_tolerance""")
    multi_stage = property(_viso2.Matcher_parameters_multi_stage_get, _viso2.Matcher_parameters_multi_stage_set, doc=r"""multi_stage""")
    half_resolution = property(_viso2.Matcher_parameters_half_resolution_get, _viso2.Matcher_parameters_half_resolution_set, doc=r"""half_resolution""")
    refinement = property(_viso2.Matcher_parameters_refinement_get, _viso2.Matcher_parameters_refinement_set, doc=r"""refinement""")
    f = property(_viso2.Matcher_parameters_f_get, _viso2.Matcher_parameters_f_set, doc=r"""f""")
    cu = property(_viso2.Matcher_parameters_cu_get, _viso2.Matcher_parameters_cu_set, doc=r"""cu""")
    cv = property(_viso2.Matcher_parameters_cv_get, _viso2.Matcher_parameters_cv_set, doc=r"""cv""")
    base = property(_viso2.Matcher_parameters_base_get, _viso2.Matcher_parameters_base_set, doc=r"""base""")
    pre_step_size = property(_viso2.Matcher_parameters_pre_step_size_get, _viso2.Matcher_parameters_pre_step_size_set, doc=r"""pre_step_size""")

    def __init__(self):
        r"""__init__(self) -> Matcher_parameters"""
        _viso2.Matcher_parameters_swiginit(self, _viso2.new_Matcher_parameters())
    __swig_destroy__ = _viso2.delete_Matcher_parameters

# Register Matcher_parameters in _viso2:
_viso2.Matcher_parameters_swigregister(Matcher_parameters)

class p_match(object):
    r"""Proxy of C++ Matcher::p_match class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    u1p = property(_viso2.p_match_u1p_get, _viso2.p_match_u1p_set, doc=r"""u1p""")
    v1p = property(_viso2.p_match_v1p_get, _viso2.p_match_v1p_set, doc=r"""v1p""")
    i1p = property(_viso2.p_match_i1p_get, _viso2.p_match_i1p_set, doc=r"""i1p""")
    u2p = property(_viso2.p_match_u2p_get, _viso2.p_match_u2p_set, doc=r"""u2p""")
    v2p = property(_viso2.p_match_v2p_get, _viso2.p_match_v2p_set, doc=r"""v2p""")
    i2p = property(_viso2.p_match_i2p_get, _viso2.p_match_i2p_set, doc=r"""i2p""")
    u1c = property(_viso2.p_match_u1c_get, _viso2.p_match_u1c_set, doc=r"""u1c""")
    v1c = property(_viso2.p_match_v1c_get, _viso2.p_match_v1c_set, doc=r"""v1c""")
    i1c = property(_viso2.p_match_i1c_get, _viso2.p_match_i1c_set, doc=r"""i1c""")
    u2c = property(_viso2.p_match_u2c_get, _viso2.p_match_u2c_set, doc=r"""u2c""")
    v2c = property(_viso2.p_match_v2c_get, _viso2.p_match_v2c_set, doc=r"""v2c""")
    i2c = property(_viso2.p_match_i2c_get, _viso2.p_match_i2c_set, doc=r"""i2c""")

    def __init__(self, *args):
        r"""
        __init__(self) -> p_match
        __init__(self, u1p, v1p, i1p, u2p, v2p, i2p, u1c, v1c, i1c, u2c, v2c, i2c) -> p_match
        """
        _viso2.p_match_swiginit(self, _viso2.new_p_match(*args))
    __swig_destroy__ = _viso2.delete_p_match

# Register p_match in _viso2:
_viso2.p_match_swigregister(p_match)

class Reconstruction(object):
    r"""Proxy of C++ Reconstruction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> Reconstruction"""
        _viso2.Reconstruction_swiginit(self, _viso2.new_Reconstruction())
    __swig_destroy__ = _viso2.delete_Reconstruction

    def setCalibration(self, f, cu, cv):
        r"""setCalibration(self, f, cu, cv)"""
        return _viso2.Reconstruction_setCalibration(self, f, cu, cv)

    def update(self, p_matched, Tr, point_type=1, min_track_length=2, max_dist=30, min_angle=2):
        r"""update(self, p_matched, Tr, point_type=1, min_track_length=2, max_dist=30, min_angle=2)"""
        return _viso2.Reconstruction_update(self, p_matched, Tr, point_type, min_track_length, max_dist, min_angle)

    def getPoints(self):
        r"""getPoints(self) -> Point3dVector"""
        return _viso2.Reconstruction_getPoints(self)

    def getTracks(self):
        r"""getTracks(self) -> TrackVector"""
        return _viso2.Reconstruction_getTracks(self)

# Register Reconstruction in _viso2:
_viso2.Reconstruction_swigregister(Reconstruction)

class point3d(object):
    r"""Proxy of C++ Reconstruction::point3d class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_viso2.point3d_x_get, _viso2.point3d_x_set, doc=r"""x""")
    y = property(_viso2.point3d_y_get, _viso2.point3d_y_set, doc=r"""y""")
    z = property(_viso2.point3d_z_get, _viso2.point3d_z_set, doc=r"""z""")

    def __init__(self, *args):
        r"""
        __init__(self) -> point3d
        __init__(self, x, y, z) -> point3d
        """
        _viso2.point3d_swiginit(self, _viso2.new_point3d(*args))
    __swig_destroy__ = _viso2.delete_point3d

# Register point3d in _viso2:
_viso2.point3d_swigregister(point3d)

class point2d(object):
    r"""Proxy of C++ Reconstruction::point2d class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    u = property(_viso2.point2d_u_get, _viso2.point2d_u_set, doc=r"""u""")
    v = property(_viso2.point2d_v_get, _viso2.point2d_v_set, doc=r"""v""")

    def __init__(self, *args):
        r"""
        __init__(self) -> point2d
        __init__(self, u, v) -> point2d
        """
        _viso2.point2d_swiginit(self, _viso2.new_point2d(*args))
    __swig_destroy__ = _viso2.delete_point2d

# Register point2d in _viso2:
_viso2.point2d_swigregister(point2d)

class track(object):
    r"""Proxy of C++ Reconstruction::track class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pixels = property(_viso2.track_pixels_get, _viso2.track_pixels_set, doc=r"""pixels""")
    pt = property(_viso2.track_pt_get, _viso2.track_pt_set, doc=r"""pt""")
    valid = property(_viso2.track_valid_get, _viso2.track_valid_set, doc=r"""valid""")
    first_frame = property(_viso2.track_first_frame_get, _viso2.track_first_frame_set, doc=r"""first_frame""")
    last_frame = property(_viso2.track_last_frame_get, _viso2.track_last_frame_set, doc=r"""last_frame""")
    last_idx = property(_viso2.track_last_idx_get, _viso2.track_last_idx_set, doc=r"""last_idx""")

    def __init__(self):
        r"""__init__(self) -> track"""
        _viso2.track_swiginit(self, _viso2.new_track())
    __swig_destroy__ = _viso2.delete_track

# Register track in _viso2:
_viso2.track_swigregister(track)

class MatchVector(object):
    r"""Proxy of C++ std::vector< Matcher::p_match > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _viso2.MatchVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _viso2.MatchVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _viso2.MatchVector___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< Matcher::p_match >::size_type"""
        return _viso2.MatchVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(self, i, j) -> MatchVector"""
        return _viso2.MatchVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)
        __setslice__(self, i, j, v)
        """
        return _viso2.MatchVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(self, i, j)"""
        return _viso2.MatchVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)
        __delitem__(self, slice)
        """
        return _viso2.MatchVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> MatchVector
        __getitem__(self, i) -> p_match
        """
        return _viso2.MatchVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)
        __setitem__(self, slice)
        __setitem__(self, i, x)
        """
        return _viso2.MatchVector___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> p_match"""
        return _viso2.MatchVector_pop(self)

    def append(self, x):
        r"""append(self, x)"""
        return _viso2.MatchVector_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _viso2.MatchVector_empty(self)

    def size(self):
        r"""size(self) -> std::vector< Matcher::p_match >::size_type"""
        return _viso2.MatchVector_size(self)

    def swap(self, v):
        r"""swap(self, v)"""
        return _viso2.MatchVector_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< Matcher::p_match >::iterator"""
        return _viso2.MatchVector_begin(self)

    def end(self):
        r"""end(self) -> std::vector< Matcher::p_match >::iterator"""
        return _viso2.MatchVector_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< Matcher::p_match >::reverse_iterator"""
        return _viso2.MatchVector_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< Matcher::p_match >::reverse_iterator"""
        return _viso2.MatchVector_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _viso2.MatchVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< Matcher::p_match >::allocator_type"""
        return _viso2.MatchVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _viso2.MatchVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< Matcher::p_match >::iterator
        erase(self, first, last) -> std::vector< Matcher::p_match >::iterator
        """
        return _viso2.MatchVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> MatchVector
        __init__(self, other) -> MatchVector
        __init__(self, size) -> MatchVector
        __init__(self, size, value) -> MatchVector
        """
        _viso2.MatchVector_swiginit(self, _viso2.new_MatchVector(*args))

    def push_back(self, x):
        r"""push_back(self, x)"""
        return _viso2.MatchVector_push_back(self, x)

    def front(self):
        r"""front(self) -> p_match"""
        return _viso2.MatchVector_front(self)

    def back(self):
        r"""back(self) -> p_match"""
        return _viso2.MatchVector_back(self)

    def assign(self, n, x):
        r"""assign(self, n, x)"""
        return _viso2.MatchVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _viso2.MatchVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< Matcher::p_match >::iterator
        insert(self, pos, n, x)
        """
        return _viso2.MatchVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(self, n)"""
        return _viso2.MatchVector_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< Matcher::p_match >::size_type"""
        return _viso2.MatchVector_capacity(self)
    __swig_destroy__ = _viso2.delete_MatchVector

# Register MatchVector in _viso2:
_viso2.MatchVector_swigregister(MatchVector)

class Point3dVector(object):
    r"""Proxy of C++ std::vector< Reconstruction::point3d > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _viso2.Point3dVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _viso2.Point3dVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _viso2.Point3dVector___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< Reconstruction::point3d >::size_type"""
        return _viso2.Point3dVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(self, i, j) -> Point3dVector"""
        return _viso2.Point3dVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)
        __setslice__(self, i, j, v)
        """
        return _viso2.Point3dVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(self, i, j)"""
        return _viso2.Point3dVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)
        __delitem__(self, slice)
        """
        return _viso2.Point3dVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> Point3dVector
        __getitem__(self, i) -> point3d
        """
        return _viso2.Point3dVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)
        __setitem__(self, slice)
        __setitem__(self, i, x)
        """
        return _viso2.Point3dVector___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> point3d"""
        return _viso2.Point3dVector_pop(self)

    def append(self, x):
        r"""append(self, x)"""
        return _viso2.Point3dVector_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _viso2.Point3dVector_empty(self)

    def size(self):
        r"""size(self) -> std::vector< Reconstruction::point3d >::size_type"""
        return _viso2.Point3dVector_size(self)

    def swap(self, v):
        r"""swap(self, v)"""
        return _viso2.Point3dVector_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< Reconstruction::point3d >::iterator"""
        return _viso2.Point3dVector_begin(self)

    def end(self):
        r"""end(self) -> std::vector< Reconstruction::point3d >::iterator"""
        return _viso2.Point3dVector_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< Reconstruction::point3d >::reverse_iterator"""
        return _viso2.Point3dVector_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< Reconstruction::point3d >::reverse_iterator"""
        return _viso2.Point3dVector_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _viso2.Point3dVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< Reconstruction::point3d >::allocator_type"""
        return _viso2.Point3dVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _viso2.Point3dVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< Reconstruction::point3d >::iterator
        erase(self, first, last) -> std::vector< Reconstruction::point3d >::iterator
        """
        return _viso2.Point3dVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> Point3dVector
        __init__(self, other) -> Point3dVector
        __init__(self, size) -> Point3dVector
        __init__(self, size, value) -> Point3dVector
        """
        _viso2.Point3dVector_swiginit(self, _viso2.new_Point3dVector(*args))

    def push_back(self, x):
        r"""push_back(self, x)"""
        return _viso2.Point3dVector_push_back(self, x)

    def front(self):
        r"""front(self) -> point3d"""
        return _viso2.Point3dVector_front(self)

    def back(self):
        r"""back(self) -> point3d"""
        return _viso2.Point3dVector_back(self)

    def assign(self, n, x):
        r"""assign(self, n, x)"""
        return _viso2.Point3dVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _viso2.Point3dVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< Reconstruction::point3d >::iterator
        insert(self, pos, n, x)
        """
        return _viso2.Point3dVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(self, n)"""
        return _viso2.Point3dVector_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< Reconstruction::point3d >::size_type"""
        return _viso2.Point3dVector_capacity(self)
    __swig_destroy__ = _viso2.delete_Point3dVector

# Register Point3dVector in _viso2:
_viso2.Point3dVector_swigregister(Point3dVector)

class TrackVector(object):
    r"""Proxy of C++ std::vector< Reconstruction::track > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _viso2.TrackVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _viso2.TrackVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _viso2.TrackVector___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< Reconstruction::track >::size_type"""
        return _viso2.TrackVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(self, i, j) -> TrackVector"""
        return _viso2.TrackVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)
        __setslice__(self, i, j, v)
        """
        return _viso2.TrackVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(self, i, j)"""
        return _viso2.TrackVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)
        __delitem__(self, slice)
        """
        return _viso2.TrackVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> TrackVector
        __getitem__(self, i) -> track
        """
        return _viso2.TrackVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)
        __setitem__(self, slice)
        __setitem__(self, i, x)
        """
        return _viso2.TrackVector___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> track"""
        return _viso2.TrackVector_pop(self)

    def append(self, x):
        r"""append(self, x)"""
        return _viso2.TrackVector_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _viso2.TrackVector_empty(self)

    def size(self):
        r"""size(self) -> std::vector< Reconstruction::track >::size_type"""
        return _viso2.TrackVector_size(self)

    def swap(self, v):
        r"""swap(self, v)"""
        return _viso2.TrackVector_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< Reconstruction::track >::iterator"""
        return _viso2.TrackVector_begin(self)

    def end(self):
        r"""end(self) -> std::vector< Reconstruction::track >::iterator"""
        return _viso2.TrackVector_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< Reconstruction::track >::reverse_iterator"""
        return _viso2.TrackVector_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< Reconstruction::track >::reverse_iterator"""
        return _viso2.TrackVector_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _viso2.TrackVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< Reconstruction::track >::allocator_type"""
        return _viso2.TrackVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _viso2.TrackVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< Reconstruction::track >::iterator
        erase(self, first, last) -> std::vector< Reconstruction::track >::iterator
        """
        return _viso2.TrackVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> TrackVector
        __init__(self, other) -> TrackVector
        __init__(self, size) -> TrackVector
        __init__(self, size, value) -> TrackVector
        """
        _viso2.TrackVector_swiginit(self, _viso2.new_TrackVector(*args))

    def push_back(self, x):
        r"""push_back(self, x)"""
        return _viso2.TrackVector_push_back(self, x)

    def front(self):
        r"""front(self) -> track"""
        return _viso2.TrackVector_front(self)

    def back(self):
        r"""back(self) -> track"""
        return _viso2.TrackVector_back(self)

    def assign(self, n, x):
        r"""assign(self, n, x)"""
        return _viso2.TrackVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _viso2.TrackVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< Reconstruction::track >::iterator
        insert(self, pos, n, x)
        """
        return _viso2.TrackVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(self, n)"""
        return _viso2.TrackVector_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< Reconstruction::track >::size_type"""
        return _viso2.TrackVector_capacity(self)
    __swig_destroy__ = _viso2.delete_TrackVector

# Register TrackVector in _viso2:
_viso2.TrackVector_swigregister(TrackVector)



